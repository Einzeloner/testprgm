just some random Chit


=> Syntax

	#include <stdio.h>
	int main ()
	{
	printf("long dick something\n");
	}

after compiling it with cc (cc filename.c)
this will give you the desired output in the printf bracket.
the \n is used so that it doesn't end in the same line as the
command sequence. Kind of like break tag.


 # A function contains statements that specify the computing operations.
 # while the variable contains the values needed for computing.
 

 # A program begins executing from the beginning of "main".


 # main calls out the other functions to do it's job.


 # the include <stdio.h> tells the compiler to include the standard
 # input output library.


 # The parenthesis { () } are the house of arguments, if it needs no
 # arguments the parenthesis are left empty.


 # The statements are contained in the braces for eg the printf one.


 # The words between double quotes are called character string
 # or string constant.


 # the \n is called the newline character which takes the
 # output and arranges it to the left margin of the next line.

 => ANOTHER PROGRAM

	> Will be used to display the fahrenheit and celsius table



	> Syntax
	

	#include <stdio.h>

	/* print fahrenheit and celsius table for fahr=0 to 300*/
	
	int main()
	{
	int fahr, celsius;
	int lower, upper, step;
	
	lower = 0;	 /* lower limit of the temp scale*/
	upper = 300;		 /* upper limit /*
	step = 20;		 /* step size*/

	fahr = lower;
	while (fahr <= upper) {
	celsius = 5 * (fahr-32) / 9;
	printf("%d\t%d\n", fahr, celsius);
	fahr = fahr + step;
	}
	}



# The things written between /* &  */ are comments and the compiler
# ignores them while compiling.


# C requires you to define variables first before using them. So the 
# declaration of variable is important. At the beginning of a function.

                              Variable types

		int = the value in the variable listed is an integer.
		
		float = value is in integers plus decimal part. eg:- 68.9

		char = a charecter (A single byte)

		short = short integer

		long = long integer

		double = double decimal integer.


# after setting up the values " ; ' (semicolon) is used to terminate the statement


while (fahr <= upper) {
}
# This statement has a while loop and it operates as follows

# The while statement check for the condition between the parentheses, if it's true
# the body of the loop the three lines between the bracket execute.

# After that it re  tests the condition and if it's true again then again the body of
# the loop is executed. When the condition becomes false the loop ends.
# If there are no further statemtnts then the looop terminates.

# the reason we don't multiply 5/9 instead do 5 * x/9 because if we do the former
# the division is rounded off in int and the fractional part is discarded

# If the variables are in float then there is no need to do that.

# %d is used with int in the printf func and %f is used with float in the printf func



			 	THE FOR STATEMENT

# the for statement can easily reduce the need of more variables.

=> The syntax


	#include <stdio.h>
	int main (){
	int fahr;
	
	for (fahr = 0; fahr <= 300; fahr = fahr + 20)
	printf("%3d %6.1f\n", fahr, (9 * fahr)/5 + 32,);
	}



# On a side note you can also compile it via gcc which produces an executable instead of a.out.
# the synatx would be [gcc -o name file.c] 

# [for (fahr = 0)] is the initialization of the loop meaning that it is done before entering the
# loop.

# [ (for fahr <= 300) ] is the second part of the loop which controls the loop if the
# condition is met.

# If the condition of the loop is met then the body of the loop executes and then the third
# condition [ (fahr = fahr + 20)] is executed.

# this systematic process [ Initialization > condition checking > re-evalutaion of condition ]
# continues until the condition in the body of the loop becomes false.

# The choice between "while" loop and "for" loop is completely personal. The "for" loop can be used 
# if we want to have less variables or want all of the condition in one body, otherwise "while" is
# a good option as well.




				SYMBOLIC CONSTANTS


# Like in the for loop program, it's not good to bury the details about 300 and 20
# They convey information about the program which might be useful for others.


==> SYNTAX

		#define name value

==> FOR EG.
		
		#include <stdio.h>
		
		#define STEP 20 	/* step of the conversion loop */
		#define LOWER 0  	/* Lower limit of the scale */
		#define UPPER 300 	/* Upper limit of the conversion scale*/ 

		int main(){
			int far;
			
			for (far = LOWER; far <= UPPER; far = far + STEP)
			printf("%3d %6d\n", far, (5.0/9.0)*(far - 32));
		}




			 	CHARACTER INPUT AND OUTPUT




